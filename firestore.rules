rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // 인증된 사용자는 자신의 문서를 읽고 쓸 수 있습니다.
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // 인증된 사용자는 새 사용자 문서를 생성할 수 있습니다 (회원가입 시).
      // 또한, 기존 사용자 정보를 업데이트할 수 있습니다 (로그인 시 lastLogin 등).
      allow create, update: if request.auth != null;
    }

    // users 컬렉션 전체에 대한 규칙 (전화번호 검색 등)
    // 주의: 이 규칙은 /users/{userId} 규칙보다 더 구체적인 규칙 뒤에 와야 합니다.
    // 또는 /users/{userId} 규칙 내에 allow get, list를 추가하는 방식을 고려할 수 있습니다.
    // 가장 간단한 방법은 /users/{userId}에 필요한 모든 권한을 명시하는 것입니다.
    // 아래는 findUserByPhone을 위한 최소한의 읽기 권한 예시입니다.
    // 좀 더 세밀한 제어를 원한다면, 특정 필드 기반 쿼리에 대한 규칙을 설정할 수 있습니다.
    match /users/{document} { // {document}는 특정 문서를 지칭
        // 인증된 사용자는 사용자 정보를 조회할 수 있습니다 (findUserByPhone).
        allow get: if request.auth != null;
    }

    // users 컬렉션에 대한 list 권한 (주의해서 사용)
    // 만약 findUserByPhone이 컬렉션 전체를 쿼리한다면 list 권한이 필요할 수 있습니다.
    // 하지만 이는 모든 사용자 데이터를 나열할 수 있게 하므로 보안상 주의해야 합니다.
    // 가능하면 get으로 특정 문서를 가져오거나, 쿼리에 대한 규칙을 더 세분화하는 것이 좋습니다.
    // match /users {
    //   allow list: if request.auth != null; // 주의: 보안 검토 필요
    // }

    // categories 컬렉션에 대한 규칙
    match /categories/{categoryId} {
      // 인증된 사용자는 카테고리를 읽고 쓸 수 있습니다
      allow read, write: if request.auth != null;
    }

    // photos 컬렉션에 대한 규칙 (사진 업로드용)
    match /photos/{photoId} {
      // 인증된 사용자는 사진을 읽고 쓸 수 있습니다
      allow read, write: if request.auth != null;
    }

    // 다른 모든 문서에 대한 기본 규칙
    match /{document=**} {
      // 인증된 사용자는 모든 문서를 읽고 쓸 수 있습니다 (개발 단계)
      allow read, write: if request.auth != null;
    }
  }
}